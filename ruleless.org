* Schedule
** Schedule For Job
*** 2015/10
**** DONE <2015-10-15 周四>(第二周) [100%]
	 CLOSED: [2015-10-17 周六 17:42]
	 - State "DONE"       from "PROCESSING" [2015-10-17 周六 17:42]
	 - State "PROCESSING" from "TODO"       [2015-10-16 周五 10:06]
***** DONE [[http://172.16.0.150:81/issues/15582][怪物装备掉率可调整功能支持]]
	  CLOSED: [2015-10-17 周六 17:42] DEADLINE: <2015-10-17 周六>
	  - State "DONE"       from "TODO"       [2015-10-17 周六 17:42]
***** DONE 技能心法1-50级引导界面
	  CLOSED: [2015-10-16 周五 16:33] DEADLINE: <2015-10-17 周六>
	  - State "DONE"       from "PROCESSING" [2015-10-16 周五 16:33]
	  - State "PROCESSING" from "TODO"       [2015-10-16 周五 10:47]
***** DONE [[http://172.16.0.150:81/issues/14921][首次出国任务警示和死亡引导]] [100%]
	  CLOSED: [2015-10-16 周五 16:00]
	  - State "DONE"       from "PROCESSING" [2015-10-16 周五 16:00]
	  - State "PROCESSING" from "DONE"       [2015-10-16 周五 10:07]
****** DONE 新手玩家首次被杀时，给与一定的补偿和安抚
	   CLOSED: [2015-10-16 周五 10:06]
	   - State "DONE"       from "PROCESSING" [2015-10-16 周五 10:06]
	   - State "PROCESSING" from "TODO"       [2015-10-15 周四 15:05]
****** DONE 新手玩家初次出国时，给予警示
	   CLOSED: [2015-10-16 周五 16:00]
	   - State "DONE"       from "PROCESSING" [2015-10-16 周五 16:00]
	   - State "PROCESSING" from "TODO"       [2015-10-16 周五 10:47]
**** TODO <2015-10-19 周一> [0%]
***** TODO 玩家每秒受到的伤害包个数，伤害包的技能来源，还有伤害值
***** TODO 首次出国任务警示和死亡引导跟进优化
***** TODO 怪物的技能也要支持配置：修正目标至最远点
*** BUG Trace
**** TODO 边境任务如果最后一轮是偷马任务，完成偷马后任务追踪里头偷马任务不消失。（偶尔）
** Schedule For Career
*** By Time
**** 2015/10
***** TODO <2015-10-16 周五> [50%]
****** DONE Learned About Emacs Org-mode
	   CLOSED: [2015-10-19 周一 19:55]
	   - State "DONE"       from "TODO"       [2015-10-19 周一 19:55]
***** TODO <2015-10-19 周一> [0%]
****** TODO [[link_U3DHeadline][U3D]]
****** PROCESSING [[link_Quaternion][四元数]]
	   - State "PROCESSING" from "TODO"       [2015-10-19 周一 19:56]
****** TODO [[link_KBE_Startup][KBE启动和执行流程]]
*** By Theme
**** TODO Unity 3D [%]
	 #<<link_U3DHeadline>>
**** TODO KBEngine [0%]													:kbe:
***** TODO read source code of KBEngine [0%]
****** TODO KBEngine 启动和执行流程
	   #<<link_KBE_Startup>>
****** TODO KBEngine 玩家登陆和角色创建流程
**** TODO 3D Rendering [0%]												 :3D:
***** TODO Math [%]													   :math:
****** TODO Quaternion (四元数)	[%] 						   :Quaternion:Q:
	   #<<link_Quaternion>>
**** TODO 游戏 [0%]
	 * [ ] 游戏中的人工智能
	   * [ ] 资料
		 * [ ] [[http://www.cnblogs.com/fingerpass/p/discussion-about-game-ai.html][漫谈游戏中的人工智能]]
	   * [ ] 决策树
	   * [ ] 行为树
* Notes
** Unix
*** [[file:Unix/PermMana.org][Unix权限管理]]
** GAE(Google App Engine)
** Source
*** GitHub
**** [[https://github.com/TencentOpen][腾讯开源库]]
	 * [ ] [[https://github.com/ruleless/behaviac][腾讯提供的行为树的一种解决方案]]
	 * [ ] [[https://github.com/ruleless/TscanCode][TscanCode 静态代码扫描工具]]
**** [[https://github.com/ruleless][ruleless]]												  :kbe:snail:src:
	 * [ ] [[git@github.com:ruleless/snail.git][snail]]
	 * [ ] [[https://github.com/ruleless/UnrealEngine][UnrealEngine]]
	 * [ ] [[https://github.com/ruleless/UnrealTournament][UnrealTournament]]
	   虚幻竞技场
	 * [ ] [[https://github.com/ruleless/sigar][sigar]]
	   System Information Gatherer And Reporter http://sigar.hyperic.com/
	 * [ ] [[https://github.com/ruleless/openssl][openssl]]
	 * [ ] [[https://github.com/ruleless/cocos2d-x][cocos2d-x]]
	 * [ ] [[https://github.com/ruleless/kbengine][kbengine]]
	   A MMOG engine of server.
	 * [ ] [[https://github.com/ruleless/kbengine_unity3d_warring][kbengine_unity3d_warring]]
	 * [ ] [[https://github.com/ruleless/ogre][orge]]
** Git																	:git:
   * Fork之后与源同步
	 可按如下步骤同步源的最新代码：
	 1. 将源仓库添加到远程仓库列表(git remote add)
	 2. 从源仓库获取最新代码
	 3. 将新更新下来的代码合并到master分支
	 #+BEGIN_SRC c
       git remote add source git@github.com:source/proj.git
       git fetch source
       git merge source/master
	 #+END_SRC
   * Git远程操作
	 * Git远程命令有:
	   1. git clone
	   2. git push
	   3. git pull
	   4. git remote
	   5. git fetch
	   Git.png
   一、git clone

   远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。


   $ git clone <版本库的网址>

   比如，克隆jQuery的版本库。


   $ git clone https://github.com/jquery/jquery.git

   该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。


   $ git clone <版本库的网址> <本地目录名>

   git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。


   $ git clone http[s]://example.com/path/to/repo.git/
   $ git clone ssh://example.com/path/to/repo.git/
   $ git clone git://example.com/path/to/repo.git/
   $ git clone /opt/git/project.git
   $ git clone file:///opt/git/project.git
   $ git clone ftp[s]://example.com/path/to/repo.git/
   $ git clone rsync://example.com/path/to/repo.git/

   SSH协议还有另一种写法。


   $ git clone [user@]example.com:path/to/repo.git/

   通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考官方文档。
   二、git remote

   为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。

   不带选项的时候，git remote命令列出所有远程主机。


   $ git remote
   origin

   使用-v选项，可以参看远程主机的网址。


   $ git remote -v
   origin  git@github.com:jquery/jquery.git (fetch)
   origin  git@github.com:jquery/jquery.git (push)

   上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。

   克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。


   $ git clone -o jQuery https://github.com/jquery/jquery.git
   $ git remote
   jQuery

   上面命令表示，克隆的时候，指定远程主机叫做jQuery。

   git remote show命令加上主机名，可以查看该主机的详细信息。


   $ git remote show <主机名>

   git remote add命令用于添加远程主机。


   $ git remote add <主机名> <网址>

   git remote rm命令用于删除远程主机。


   $ git remote rm <主机名>

   git remote rename命令用于远程主机的改名。


   $ git remote rename <原主机名> <新主机名>

   三、git fetch

   一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。


   $ git fetch <远程主机名>

   上面命令将某个远程主机的更新，全部取回本地。

   默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。


   $ git fetch <远程主机名> <分支名>

   比如，取回origin主机的master分支。


   $ git fetch origin master

   所取回的更新，在本地主机上要用"远程主机名/分支名"的形式读取。比如origin主机的master，就要用origin/master读取。

   git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。


   $ git branch -r
   origin/master

   $ git branch -a
    * master
      remotes/origin/master

   上面命令表示，本地主机的当前分支是master，远程分支是origin/master。

   取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。


   $ git checkout -b newBrach origin/master

   上面命令表示，在origin/master的基础上，创建一个新分支。

   此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。


   $ git merge origin/master
   # 或者
   $ git rebase origin/master

   上面命令表示在当前分支上，合并origin/master。
   四、git pull

   git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。


   $ git pull <远程主机名> <远程分支名>:<本地分支名>

   比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。


   $ git pull origin next:master

   如果远程分支是与当前分支合并，则冒号后面的部分可以省略。


   $ git pull origin next

   上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。


   $ git fetch origin
   $ git merge origin/next

   在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动"追踪"origin/master分支。

   Git也允许手动建立追踪关系。


   git branch --set-upstream master origin/next

   上面命令指定master分支追踪origin/next分支。

   如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。


   $ git pull origin

   上面命令表示，本地的当前分支自动与对应的origin主机"追踪分支"（remote-tracking branch）进行合并。

   如果当前分支只有一个追踪分支，连远程主机名都可以省略。


   $ git pull

   上面命令表示，当前分支自动与唯一一个追踪分支进行合并。

   如果合并需要采用rebase模式，可以使用--rebase选项。


   $ git pull --rebase <远程主机名> <远程分支名>:<本地分支名>

   如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。

   但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。


   $ git pull -p
   # 等同于下面的命令
   $ git fetch --prune origin
   $ git fetch -p

   五、git push

   git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。


   $ git push <远程主机名> <本地分支名>:<远程分支名>

   注意，分支推送顺序的写法是<来源地>:<目的地>，所以git pull是<远程分支>:<本地分支>，而git push是<本地分支>:<远程分支>。

   如果省略远程分支名，则表示将本地分支推送与之存在"追踪关系"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。


   $ git push origin master

   上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。

   如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。


   $ git push origin :master
   # 等同于
   $ git push origin --delete master

   上面命令表示删除origin主机的master分支。

   如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。


   $ git push origin

   上面命令表示，将当前分支推送到origin主机的对应分支。

   如果当前分支只有一个追踪分支，那么主机名都可以省略。


   $ git push

   如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。


   $ git push -u origin master

   上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。

   不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。


   $ git config --global push.default matching
   # 或者
   $ git config --global push.default simple

   还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用--all选项。


   $ git push --all origin

   上面命令表示，将所有本地分支都推送到origin主机。

   如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用--force选项。


   $ git push --force origin

   上面命令使用--force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用--force选项。

   最后，git push不会推送标签（tag），除非使用--tags选项。


   $ git push origin --tags

* Articles
** MMOG
*** [[https://developer.valvesoftware.com/wiki/Main_Page][Source Engine]]
**** [[https://developer.valvesoftware.com/wiki/Latency_Compensating_Methods_in_Client/Server_In-game_Protocol_Design_and_Optimization][网络延时补偿]]
**** [[https://developer.valvesoftware.com/wiki/Lag_compensation][Lag compensation]]
**** [[https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking][Source Multiplayer Networking]]
